"use strict";(self.webpackChunkweb_test=self.webpackChunkweb_test||[]).push([[208],{3662:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var a=n(5893),r=n(1151),o=n(4866),s=n(5162);const i={sidebar_position:7},l=void 0,c={id:"tutorial-basics/toggles",title:"toggles",description:"De\u011fi\u015fecek yerleri b\u0131radan inceleyebilirsiniz.",source:"@site/docs/tutorial-basics/toggles.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/toggles",permalink:"/web-test/docs/tutorial-basics/toggles",draft:!1,unlisted:!1,editUrl:"https://github.com/koltigin/web-test/tree/main/docs/tutorial-basics/toggles.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Tablar",permalink:"/web-test/docs/tutorial-basics/tabs"},next:{title:"Tutorial - Extras",permalink:"/web-test/docs/category/tutorial---extras"}},u={},d=[];function h(e){const t={code:"code",pre:"pre",...(0,r.a)(),...e.components},{Details:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,a.jsxs)(n,{children:[(0,a.jsx)("summary",{children:"De\u011fi\u015fecek yerleri b\u0131radan inceleyebilirsiniz."}),(0,a.jsxs)(o.Z,{children:[(0,a.jsx)(s.Z,{value:"Orijinal Hali",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"import { JWKInterface } from 'arweave/node/lib/wallet';\n\nimport { IOState } from '../src/types';\nimport {\n  arnsContractTxId,\n  arweave,\n  getContractManifest,\n  initialize,\n  loadWallet,\n  warp,\n} from './utilities';\n\n/* eslint-disable no-console */\n// This script will update the settings for a gateway that is already joined to the network\n// Only the gateway's wallet owner is authorized to adjust these settings\n(async () => {\n  initialize();\n\n  // the friendly label for this gateway\n  // const label = 'Test Gateway';\n\n  // the fully qualified domain name for this gateway eg. arweave.net\n  // const fqdn = 'permanence-testing.org';\n\n  // uncomment the below settings and update as needed\n  // the port used for this gateway eg. 443\n  // const port = 443\n\n  // the application layer protocol used by this gateway eg http or https\n  // const protocol = 'https'\n\n  // an optional gateway properties file located at this Arweave transaction id eg.\n  // const properties = 'FH1aVetOoulPGqgYukj0VE0wIhDy90WiQoV3U2PeY44'\n\n  // an optional, short note to further describe this gateway and its status\n  // const note = 'Give me feedback about this gateway at my Xwitter @testgatewayguy'\n\n  // The observer wallet public address eg.iKryOeZQMONi2965nKz528htMMN_sBcjlhc-VncoRjA which is used to upload observation reports\n  // const observerWallet = '';\n\n  // Enable or disable delegated staking.  If true, other token holders can delegate their stake to this gateway\n  // const allowDelegatedStaking: boolean = true;\n\n  // Number between 0-100 indicating the percent of gateway and observer rewards given to delegates eg. 30 is 30% distributed to delegates\n  // The default is 0\n  // const delegateRewardShareRatio: number = 10;\n\n  // The minimum stake in IO a delegate must use for this for this gateway.  Must be greater than the contracts minimum delegated stake\n  // The default is 100 IO\n  // const minDelegatedStake: number = 200;\n\n  // Get the key file used for the distribution\n  const wallet: JWKInterface = loadWallet();\n\n  // wallet address\n  const walletAddress = await arweave.wallets.getAddress(wallet);\n\n  // get contract manifest\n  const { evaluationOptions = {} } = await getContractManifest({\n    contractTxId: arnsContractTxId,\n  });\n\n  // Read the ANT Registry Contract\n  const contract = await warp\n    .contract<IOState>(arnsContractTxId)\n    .connect(wallet)\n    .setEvaluationOptions(evaluationOptions)\n    .syncState(`https://api.arns.app/v1/contract/${arnsContractTxId}`, {\n      validity: true,\n    });\n\n  // Include any settings as needed below\n  const writeInteraction = await contract.writeInteraction(\n    {\n      function: 'updateGatewaySettings',\n      // label,\n      // fqdn,\n      // observerWallet,\n      // port,\n      // protocol,\n      // properties,\n      // allowDelegatedStaking,\n      // delegateRewardShareRatio,\n      // minDelegatedStake,\n      // note\n    },\n    {\n      disableBundling: true,\n    },\n  );\n\n  console.log(\n    `${walletAddress} successfully updated gateway settings with TX id: ${writeInteraction?.originalTxId}`,\n  );\n})();\n"})})}),(0,a.jsx)(s.Z,{value:"De\u011fi\u015ftirilmi\u015f Hali",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"import { JWKInterface } from 'arweave/node/lib/wallet';\n\nimport { IOState } from '../src/types';\nimport {\n  arnsContractTxId,\n  arweave,\n  getContractManifest,\n  initialize,\n  loadWallet,\n  warp,\n} from './utilities';\n\n/* eslint-disable no-console */\n// This script will update the settings for a gateway that is already joined to the network\n// Only the gateway's wallet owner is authorized to adjust these settings\n(async () => {\n  initialize();\n\n  // the friendly label for this gateway\n  // const label = 'Test Gateway';\n\n  // the fully qualified domain name for this gateway eg. arweave.net\n  // const fqdn = 'permanence-testing.org';\n\n  // uncomment the below settings and update as needed\n  // the port used for this gateway eg. 443\n  // const port = 443\n\n  // the application layer protocol used by this gateway eg http or https\n  // const protocol = 'https'\n\n  // an optional gateway properties file located at this Arweave transaction id eg.\n  // const properties = 'FH1aVetOoulPGqgYukj0VE0wIhDy90WiQoV3U2PeY44'\n\n  // an optional, short note to further describe this gateway and its status\n  // const note = 'Give me feedback about this gateway at my Xwitter @testgatewayguy'\n\n  // The observer wallet public address eg.iKryOeZQMONi2965nKz528htMMN_sBcjlhc-VncoRjA which is used to upload observation reports\n  // const observerWallet = '';\n\n  // Enable or disable delegated staking.  If true, other token holders can delegate their stake to this gateway\n  const allowDelegatedStaking: boolean = true;\n\n  // Number between 0-100 indicating the percent of gateway and observer rewards given to delegates eg. 30 is 30% distributed to delegates\n  // The default is 0\n  const delegateRewardShareRatio: number = 10;\n\n  // The minimum stake in IO a delegate must use for this for this gateway.  Must be greater than the contracts minimum delegated stake\n  // The default is 100 IO\n  const minDelegatedStake: number = 100000000;\n\n  // Get the key file used for the distribution\n  const wallet: JWKInterface = loadWallet();\n\n  // wallet address\n  const walletAddress = await arweave.wallets.getAddress(wallet);\n\n  // get contract manifest\n  const { evaluationOptions = {} } = await getContractManifest({\n    contractTxId: arnsContractTxId,\n  });\n\n  // Read the ANT Registry Contract\n  const contract = await warp\n    .contract<IOState>(arnsContractTxId)\n    .connect(wallet)\n    .setEvaluationOptions(evaluationOptions)\n    .syncState(`https://api.arns.app/v1/contract/${arnsContractTxId}`, {\n      validity: true,\n    });\n\n  // Include any settings as needed below\n  const writeInteraction = await contract.writeInteraction(\n    {\n      function: 'updateGatewaySettings',\n      // label,\n      // fqdn,\n      // observerWallet,\n      // port,\n      // protocol,\n      // properties,\n      allowDelegatedStaking,\n      delegateRewardShareRatio,\n      minDelegatedStake,\n      // note\n    },\n    {\n      disableBundling: true,\n    },\n  );\n\n  console.log(\n    `${walletAddress} successfully updated gateway settings with TX id: ${writeInteraction?.originalTxId}`,\n  );\n})();\n"})})})]})]})}function p(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},5162:(e,t,n)=>{n.d(t,{Z:()=>s});n(7294);var a=n(512);const r={tabItem:"tabItem_Ymn6"};var o=n(5893);function s(e){let{children:t,hidden:n,className:s}=e;return(0,o.jsx)("div",{role:"tabpanel",className:(0,a.Z)(r.tabItem,s),hidden:n,children:t})}},4866:(e,t,n)=>{n.d(t,{Z:()=>k});var a=n(7294),r=n(512),o=n(2466),s=n(6550),i=n(469),l=n(1980),c=n(7392),u=n(12);function d(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??function(e){return d(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function p(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:n}=e;const r=(0,s.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l._X)(o),(0,a.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(r.location.search);t.set(o,e),r.replace({...r.location,search:t.toString()})}),[o,r])]}function b(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,o=h(e),[s,l]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[c,d]=g({queryString:n,groupId:r}),[b,w]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,o]=(0,u.Nk)(n);return[r,(0,a.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:r}),f=(()=>{const e=c??b;return p({value:e,tabValues:o})?e:null})();(0,i.Z)((()=>{f&&l(f)}),[f]);return{selectedValue:s,selectValue:(0,a.useCallback)((e=>{if(!p({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),d(e),w(e)}),[d,w,o]),tabValues:o}}var w=n(2389);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var m=n(5893);function y(e){let{className:t,block:n,selectedValue:a,selectValue:s,tabValues:i}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,o.o5)(),u=e=>{const t=e.currentTarget,n=l.indexOf(t),r=i[n].value;r!==a&&(c(t),s(r))},d=e=>{let t=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;t=l[n]??l[0];break}case"ArrowLeft":{const n=l.indexOf(e.currentTarget)-1;t=l[n]??l[l.length-1];break}}t?.focus()};return(0,m.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},t),children:i.map((e=>{let{value:t,label:n,attributes:o}=e;return(0,m.jsx)("li",{role:"tab",tabIndex:a===t?0:-1,"aria-selected":a===t,ref:e=>l.push(e),onKeyDown:d,onClick:u,...o,className:(0,r.Z)("tabs__item",f.tabItem,o?.className,{"tabs__item--active":a===t}),children:n??t},t)}))})}function v(e){let{lazy:t,children:n,selectedValue:r}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return(0,m.jsx)("div",{className:"margin-top--md",children:o.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r})))})}function I(e){const t=b(e);return(0,m.jsxs)("div",{className:(0,r.Z)("tabs-container",f.tabList),children:[(0,m.jsx)(y,{...e,...t}),(0,m.jsx)(v,{...e,...t})]})}function k(e){const t=(0,w.Z)();return(0,m.jsx)(I,{...e,children:d(e.children)},String(t))}},1151:(e,t,n)=>{n.d(t,{Z:()=>i,a:()=>s});var a=n(7294);const r={},o=a.createContext(r);function s(e){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(o.Provider,{value:t},e.children)}}}]);